name: '.Platform: Dependencies'

on:
  workflow_dispatch:
    inputs:
      deploySqlMiDependencies:
        type: boolean
        description: 'Enable SqlMi dependencies deployment'
        required: false
        default: false
      deployVhdDependencies:
        type: boolean
        description: 'Enable deployment of a vhd stored in a blob container'
        required: false
        default: false

  # push:
  #   branches:
  #     - main
  #   paths:
  #     - '.github/actions/templates/validateModuleDeployment/**'
  #     - '.github/workflows/platform.dependencies.yml'
  #     - 'utilities/pipelines/dependencies/**'

env:
  location: 'eastus'
  defaultResourceGroupName: 'validation-rg'
  resourceGroupNameArtifacts: 'artifacts-rg'
  removeDeployment: 'false'
  dependencyPath: 'utilities/pipelines/dependencies'
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  ARM_SUBSCRIPTION_ID: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
  ARM_MGMTGROUP_ID: '${{ secrets.ARM_MGMTGROUP_ID }}'
  ARM_TENANT_ID: '${{ secrets.ARM_TENANT_ID }}'
  DEPLOYMENT_SP_ID: '${{ secrets.DEPLOYMENT_SP_ID }}'

jobs:
  job_deploy_rg:
    runs-on: ubuntu-20.04
    name: 'Deploy resource group'
    env:
      namespace: 'Microsoft.Resources\resourceGroups'
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['validation.parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'

  job_deploy_ppg:
    runs-on: ubuntu-20.04
    name: 'Deploy proximity placement group'
    env:
      namespace: 'Microsoft.Compute\proximityPlacementGroups'
    needs:
      - job_deploy_rg
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'

  job_deploy_msi:
    runs-on: ubuntu-20.04
    name: 'Deploy user assigned identity'
    env:
      namespace: 'Microsoft.ManagedIdentity\userAssignedIdentities'
    needs:
      - job_deploy_rg
    outputs:
      msiPrincipalId: ${{ steps.print_msi_prinId.outputs.msiPrincipalId }}
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        id: deploy_msi
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'
      - name: Set msi principal ID output
        id: print_msi_prinId
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $deploymentOutput = '${{ steps.deploy_msi.outputs.deploymentOutput }}'
            $msiPrincipalId = (ConvertFrom-Json $deploymentOutput).principalId
            Write-Verbose "msiPrincipalId: $msiPrincipalId" -Verbose
            Write-Output ('::set-output name={0}::{1}' -f 'msiPrincipalId', $msiPrincipalId)
          azPSVersion: 'latest'

  job_deploy_sf:
    runs-on: ubuntu-20.04
    name: 'Deploy server farm'
    env:
      namespace: 'Microsoft.Web/serverfarms'
    needs:
      - job_deploy_rg
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'

  job_deploy_pa:
    runs-on: ubuntu-20.04
    name: 'Deploy policy assignment'
    env:
      namespace: 'Microsoft.Authorization\policyAssignments'
    needs:
      - job_deploy_rg
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['mg.parameters.json', 'sub.parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'

  job_deploy_evh:
    runs-on: ubuntu-20.04
    name: 'Deploy eventhub'
    env:
      namespace: 'Microsoft.EventHub\namespaces'
    needs:
      - job_deploy_rg
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'

  job_deploy_law:
    runs-on: ubuntu-20.04
    name: 'Deploy log analytics workspace'
    env:
      namespace: 'Microsoft.OperationalInsights\workspaces'
    needs:
      - job_deploy_rg
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths:
          ['appi.parameters.json', 'aut.parameters.json', 'parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'

  job_deploy_sa:
    runs-on: ubuntu-20.04
    name: 'Deploy storage account'
    env:
      namespace: 'Microsoft.Storage\storageAccounts'
    needs:
      - job_deploy_rg
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths:
          ['fa.parameters.json', 'law.parameters.json', 'parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'

  job_sa_upload_storage_files:
    runs-on: ubuntu-20.04
    name: 'Upload files to storage account'
    env:
      namespace: 'Microsoft.Storage\storageAccounts'
    needs:
      - job_deploy_sa
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Setup agent'
        shell: pwsh
        run: |
          # Load used functions
          . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

          # Define PS modules to install on the runner
          $Modules = @(
              @{ Name = 'Az.Storage' }
          )

          # Set agent up
          Set-EnvironmentOnAgent -PSModules $Modules
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
      - name: Run PowerShell
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $parameterFilePath = Join-Path $env:GITHUB_WORKSPACE '${{ env.dependencyPath }}' '${{ env.namespace }}' 'parameters' 'parameters.json'
            # Load used functions
            . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'sharedScripts' 'Export-ContentToBlob.ps1')
            . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'tokensReplacement' 'Convert-TokensInFile.ps1')

            # Replace tokens in parameter file
            $Settings = Get-Content -Path "settings.json" | ConvertFrom-Json -AsHashTable
            $ConvertTokensInputs = @{
                FilePath    = $parameterFilePath
                Tokens      = @{}
                TokenPrefix = $Settings.parameterFileTokens.tokenPrefix
                TokenSuffix = $Settings.parameterFileTokens.tokenSuffix
            }

            # Add local tokens
            if ($Settings.parameterFileTokens.localTokens) {
                $tokenMap = @{}
                foreach ($token in $Settings.parameterFileTokens.localTokens) {
                    $tokenMap += @{ $token.name = $token.value }
                }
                Write-Verbose ('Using local tokens [{0}]' -f ($tokenMap.Keys -join ', ')) -Verbose
                $ConvertTokensInputs.Tokens += $tokenMap
            }

            $null = Convert-TokensInFile @ConvertTokensInputs

            # Get storage account name
            $storageAccountParameters = (ConvertFrom-Json (Get-Content -path $parameterFilePath -Raw)).parameters

            # Upload files to storage account
            $functionInput = @{
              ResourceGroupName   = '${{ env.defaultResourceGroupName }}'
              StorageAccountName  = $storageAccountParameters.name.value
              contentDirectories  = Join-Path $env:GITHUB_WORKSPACE '${{ env.dependencyPath }}' '${{ env.namespace }}' 'uploads'
              targetContainer     = $storageAccountParameters.blobServices.value.containers[0].name
            }

            Write-Verbose "Invoke task with" -Verbose
            Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

            Export-ContentToBlob @functionInput -Verbose
          azPSVersion: 'latest'

  job_deploy_sig:
    runs-on: ubuntu-20.04
    name: 'Deploy shared image gallery and definition'
    env:
      namespace: 'Microsoft.Compute\galleries'
    needs:
      - job_deploy_rg
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'

  job_deploy_imgt:
    runs-on: ubuntu-20.04
    name: 'Deploy image template'
    if: github.event.inputs.deployVhdDependencies == 'true'
    env:
      namespace: 'Microsoft.VirtualMachineImages\imageTemplates'
    needs:
      - job_deploy_rolea
      - job_deploy_sig
    outputs:
      imageTemplateName: ${{ steps.print_imgt_output.outputs.imageTemplateName }}
      imageTemplateResourceGroup: ${{ steps.print_imgt_output.outputs.imageTemplateResourceGroup }}
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        id: deploy_imgt
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'
      - name: 'Set image template output'
        id: print_imgt_output
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $deploymentOutput = '${{ steps.deploy_imgt.outputs.deploymentOutput }}'
            $imageTemplateName = (ConvertFrom-Json $deploymentOutput).name
            $imageTemplateResourceGroup = (ConvertFrom-Json $deploymentOutput).resourceGroupName
            Write-Verbose "imageTemplateName: $imageTemplateName" -Verbose
            Write-Verbose "imageTemplateResourceGroup: $imageTemplateResourceGroup" -Verbose
            Write-Output ('::set-output name={0}::{1}' -f 'imageTemplateName', $imageTemplateName)
            Write-Output ('::set-output name={0}::{1}' -f 'imageTemplateResourceGroup', $imageTemplateResourceGroup)
          azPSVersion: 'latest'

  job_deploy_vhd_to_sa:
    runs-on: ubuntu-20.04
    name: 'Trigger vhd build and store it to a storage account blob container'
    if: github.event.inputs.deployVhdDependencies == 'true'
    env:
      imgtNamespace: 'Microsoft.VirtualMachineImages\imageTemplates'
      saNamespace: 'Microsoft.Storage\storageAccounts'
    needs:
      - job_deploy_imgt
      - job_deploy_sa
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Setup agent'
        shell: pwsh
        run: |
          # Load used functions
          . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

          # Define PS modules to install on the runner
          $Modules = @(
              @{ Name = 'Az.ImageBuilder' },
              @{ Name = 'Az.Storage' }
          )

          # Set agent up
          Set-EnvironmentOnAgent -PSModules $Modules
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
      - name: 'Trigger building new image'
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Write-Verbose "Retrieving output from previous job" -Verbose
            $imageTemplateName = '${{ needs.job_deploy_imgt.outputs.imageTemplateName }}'
            $imageTemplateResourceGroup = '${{ needs.job_deploy_imgt.outputs.imageTemplateResourceGroup }}'

            Write-Verbose "Trigger new image creation with imageTemplateName $imageTemplateName and imageTemplateResourceGroup $imageTemplateResourceGroup" -Verbose
            Start-AzImageBuilderTemplate -ImageTemplateName $imageTemplateName -ResourceGroupName $imageTemplateResourceGroup
          azPSVersion: 'latest'
      - name: 'Copy baked vhd to a storage account'
        uses: azure/powershell@v1
        with:
          inlineScript: |
            # Load used functions
            . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'tokensReplacement' 'Convert-TokensInFile.ps1')

            # Prepare replace tokens in parameter file
            $Settings = Get-Content -Path "settings.json" | ConvertFrom-Json -AsHashTable
            $ConvertTokensInputs = @{
                Tokens      = @{}
                TokenPrefix = $Settings.parameterFileTokens.tokenPrefix
                TokenSuffix = $Settings.parameterFileTokens.tokenSuffix
            }

            # Add local tokens
            if ($Settings.parameterFileTokens.localTokens) {
                $tokenMap = @{}
                foreach ($token in $Settings.parameterFileTokens.localTokens) {
                    $tokenMap += @{ $token.name = $token.value }
                }
                Write-Verbose ('Using local tokens [{0}]' -f ($tokenMap.Keys -join ', ')) -Verbose
                $ConvertTokensInputs.Tokens += $tokenMap
            }

            # Retrieving parameters from previous job outputs and parameter files
            Write-Verbose "Retrieving parameters from previous job outputs" -Verbose
            $imageTemplateName = '${{ needs.job_deploy_imgt.outputs.imageTemplateName }}'
            $imageTemplateResourceGroup = '${{ needs.job_deploy_imgt.outputs.imageTemplateResourceGroup }}'

            Write-Verbose "Retrieving parameters from storage account parameter files" -Verbose
            $parameterFilePath = Join-Path $env:GITHUB_WORKSPACE '${{ env.dependencyPath }}' '${{ env.saNamespace }}' 'parameters' 'parameters.json'
            $null = Convert-TokensInFile @ConvertTokensInputs -FilePath $parameterFilePath -Verbose
            $storageAccountParameters = (ConvertFrom-Json (Get-Content -path $parameterFilePath -Raw)).parameters

            Write-Verbose "Retrieving parameters from image template parameter files" -Verbose
            $parameterFilePath = Join-Path $env:GITHUB_WORKSPACE '${{ env.dependencyPath }}' '${{ env.imgtNamespace }}' 'parameters' 'parameters.json'
            $null = Convert-TokensInFile @ConvertTokensInputs -FilePath $parameterFilePath -Verbose
            $imageTemplateParameters = (ConvertFrom-Json (Get-Content -path $parameterFilePath -Raw)).parameters

            # Initializing parameters before the blob copy
            Write-Verbose "Initializing source storage account parameters before the blob copy" -Verbose
            $imgtRunOutput = Get-AzImageBuilderRunOutput -ImageTemplateName $imageTemplateName -ResourceGroupName $imageTemplateResourceGroup | Where-Object ArtifactUri -NE $null
            $sourceUri = $imgtRunOutput.ArtifactUri
            $sourceStorageAccountName = $sourceUri.Split('//')[1].Split('.')[0]
            $sourceStorageAccount = Get-AzStorageAccount | Where-Object StorageAccountName -EQ $sourceStorageAccountName
            $sourceStorageAccountContext = $sourceStorageAccount.Context
            $sourceStorageAccountRGName = $sourceStorageAccount.ResourceGroupName
            Write-Verbose "Retrieving artifact uri $sourceUri stored in resource group $sourceStorageAccountRGName" -Verbose

            Write-Verbose "Initializing destination storage account parameters before the blob copy" -Verbose
            $destinationStorageAccountName = $storageAccountParameters.name.value
            $destinationStorageAccount = Get-AzStorageAccount | Where-Object StorageAccountName -EQ $destinationStorageAccountName
            $destinationStorageAccountContext = $destinationStorageAccount.Context
            $destinationContainerName = 'vhds'
            $destinationBlobName = $imageTemplateParameters.name.value
            $destinationBlobName = "$destinationBlobName.vhd"
            Write-Verbose "Planning for destination blob name $destinationBlobName in container $destinationContainerName and storage account $destinationStorageAccountName" -Verbose

            # Copying the vhd to a destination blob container
            Write-Verbose "Copying the vhd to a destination blob container" -Verbose
            $resourceActionInputObject = @{
                AbsoluteUri   = $sourceUri
                Context       = $sourceStorageAccountContext
                DestContext   = $destinationStorageAccountContext
                DestBlob      = $destinationBlobName
                DestContainer = $destinationContainerName
                Force         = $true
            }
            Start-AzStorageBlobCopy @resourceActionInputObject
          azPSVersion: 'latest'

  job_deploy_ag:
    runs-on: ubuntu-20.04
    name: 'Deploy action groups'
    env:
      namespace: 'Microsoft.Insights\actionGroups'
    needs:
      - job_deploy_rg
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'

  job_deploy_asg:
    runs-on: ubuntu-20.04
    name: 'Deploy application security groups'
    env:
      namespace: 'Microsoft.Network\applicationSecurityGroups'
    needs:
      - job_deploy_rg
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'

  job_deploy_udr:
    runs-on: ubuntu-20.04
    name: 'Deploy route tables'
    env:
      namespace: 'Microsoft.Network\routeTables'
    needs:
      - job_deploy_rg
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'

  job_deploy_sqlmi_udr:
    runs-on: ubuntu-20.04
    name: 'Deploy sqlmi route tables'
    if: github.event.inputs.deploySqlMiDependencies == 'true'
    env:
      namespace: 'Microsoft.Network\routeTables'
    needs:
      - job_deploy_rg
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['sqlMi.parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'

  job_deploy_nsg:
    runs-on: ubuntu-20.04
    name: 'Deploy network security groups'
    env:
      namespace: 'Microsoft.Network\networkSecurityGroups'
    needs:
      - job_deploy_sa
      - job_deploy_evh
      - job_deploy_law
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths:
          [
            'apgw.parameters.json',
            'ase.parameters.json',
            'bastion.parameters.json',
            'parameters.json',
          ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'

  job_deploy_sqlmi_nsg:
    runs-on: ubuntu-20.04
    name: 'Deploy sqlmi network security group'
    if: github.event.inputs.deploySqlMiDependencies == 'true'
    env:
      namespace: 'Microsoft.Network\networkSecurityGroups'
    needs:
      - job_deploy_sa
      - job_deploy_evh
      - job_deploy_law
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['sqlmi.parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'

  job_deploy_pip:
    runs-on: ubuntu-20.04
    name: 'Deploy public IP addresses'
    env:
      namespace: 'Microsoft.Network\publicIPAddresses'
    needs:
      - job_deploy_sa
      - job_deploy_evh
      - job_deploy_law
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths:
          [
            'apgw.parameters.json',
            'bas.parameters.json',
            'lb.parameters.json',
            'lb.min.parameters.json',
            'fw.parameters.json',
          ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'

  job_deploy_appi:
    runs-on: ubuntu-20.04
    name: 'Deploy application insight'
    env:
      namespace: 'Microsoft.Insights\components'
    needs:
      - job_deploy_sa
      - job_deploy_evh
      - job_deploy_law
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'

  job_deploy_aut:
    runs-on: ubuntu-20.04
    name: 'Deploy automation account'
    env:
      namespace: 'Microsoft.Automation\automationAccounts'
    needs:
      - job_deploy_sa
      - job_deploy_evh
      - job_deploy_law
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'

  job_deploy_avdhp:
    runs-on: ubuntu-20.04
    name: 'Deploy AVD host pool'
    env:
      namespace: 'Microsoft.DesktopVirtualization\hostpools'
    needs:
      - job_deploy_sa
      - job_deploy_evh
      - job_deploy_law
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'

  job_deploy_rsv:
    runs-on: ubuntu-20.04
    name: 'Deploy recovery services vault'
    env:
      namespace: 'Microsoft.RecoveryServices\vaults'
    needs:
      - job_deploy_sa
      - job_deploy_evh
      - job_deploy_law
      - job_deploy_msi
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'
          customParameterFileTokens: '{"msiPrincipalId":"${{ needs.job_deploy_msi.outputs.msiPrincipalId }}"}'

  job_deploy_kv:
    runs-on: ubuntu-20.04
    name: 'Deploy key vaults'
    env:
      namespace: 'Microsoft.KeyVault\vaults'
    needs:
      - job_deploy_sa
      - job_deploy_evh
      - job_deploy_law
      - job_deploy_msi
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths:
          ['parameters.json', 'pe.parameters.json', 'nopr.parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'
          customParameterFileTokens: '{"msiPrincipalId":"${{ needs.job_deploy_msi.outputs.msiPrincipalId }}"}'

  job_deploy_kv_secrets:
    runs-on: ubuntu-20.04
    name: 'Set key vault secrets keys and certificates'
    env:
      namespace: 'Microsoft.KeyVault\vaults'
    needs:
      - job_deploy_kv
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Setup agent'
        shell: pwsh
        run: |
          # Load used functions
          . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

          # Define PS modules to install on the runner
          $Modules = @(
              @{ Name = 'Az.KeyVault' }
          )

          # Set agent up
          Set-EnvironmentOnAgent -PSModules $Modules
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
      - name: 'Set key vault secrets keys and certificates'
        uses: azure/powershell@v1
        with:
          inlineScript: |

            $parameterFilePath = Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'dependencies' '${{ env.namespace }}' 'parameters' 'parameters.json'
            $noprParameterFilePath = Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'dependencies' '${{ env.namespace }}' 'parameters' 'nopr.parameters.json'
            # Load used functions
            . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'tokensReplacement' 'Convert-TokensInFile.ps1')

            # Replace tokens in parameter file
            $Settings = Get-Content -Path "settings.json" | ConvertFrom-Json -AsHashTable
            $ConvertTokensInputs = @{
                FilePath    = $parameterFilePath
                Tokens      = @{}
                TokenPrefix = $Settings.parameterFileTokens.tokenPrefix
                TokenSuffix = $Settings.parameterFileTokens.tokenSuffix
            }
             $NoprConvertTokensInputs = @{
                FilePath    = $noprParameterFilePath
                Tokens      = @{}
                TokenPrefix = $Settings.parameterFileTokens.tokenPrefix
                TokenSuffix = $Settings.parameterFileTokens.tokenSuffix
            }
            if ($Settings.parameterFileTokens.localTokens) {
                $tokenMap = @{}
                foreach ($token in $Settings.parameterFileTokens.localTokens) {
                    $tokenMap += @{ $token.name = $token.value }
                }
                Write-Verbose ('Using local tokens [{0}]' -f ($tokenMap.Keys -join ', ')) -Verbose
                $ConvertTokensInputs.Tokens += $tokenMap
                $NoprConvertTokensInputs.Tokens += $tokenMap
            }
            $null = Convert-TokensInFile @ConvertTokensInputs
            $null = Convert-TokensInFile @NoprConvertTokensInputs

            # Get key vault name
            $keyVaultParameters = (ConvertFrom-Json (Get-Content -Path $parameterFilePath -Raw)).parameters
            $keyVaultName = $keyVaultParameters.name.value

            $noprKeyVaultParameters = (ConvertFrom-Json (Get-Content -Path $noprParameterFilePath -Raw)).parameters
            $noprKeyVaultName = $noprKeyVaultParameters.name.value


            # Generate values
            $usernameString = ( -join ((65..90) + (97..122) | Get-Random -Count 9 -SetSeed 1 | ForEach-Object { [char]$_ + "$_" })).substring(0, 19) # max length
            $userName = ConvertTo-SecureString -String $usernameString -AsPlainText -Force
            $passwordString = (New-Guid).Guid.SubString(0, 19)
            $password = ConvertTo-SecureString -String $passwordString -AsPlainText -Force
            $vpnSharedKeyString = (New-Guid).Guid.SubString(0, 32)
            $vpnSharedKey = ConvertTo-SecureString -String $vpnSharedKeyString -AsPlainText -Force

            # Set secrets
            # -------
            @(
              @{ name = 'adminUsername'; secretValue = $username } # VirtualMachines and VMSS
              @{ name = 'adminPassword'; secretValue = $password } # VirtualMachines and VMSS
              @{ name = 'administratorLogin'; secretValue = $username } # Azure SQLServer
              @{ name = 'administratorLoginPassword'; secretValue = $password } # Azure SQLServer
              @{ name = 'vpnSharedKey'; secretValue = $vpnSharedKey } # VirtualNetworkGateway
              @{ name = 'apimClientId'; secretValue = $username } # API management
              @{ name = 'apimClientSecret'; secretValue = $password } # API management
            ) | ForEach-Object {
              $null = Set-AzKeyVaultSecret -VaultName $keyVaultName -Name $_.name -SecretValue $_.secretValue
              Write-Verbose ('Added secret [{0}] to key vault [{1}]' -f $_.name, $keyVaultName) -Verbose
            }

            # Set certificates
            # -----------
            $certPolicy = New-AzKeyVaultCertificatePolicy -SecretContentType 'application/x-pkcs12' -SubjectName 'CN=fabrikam.com' -IssuerName 'Self' -ValidityInMonths 12 -ReuseKeyOnRenewal
            @(
              @{ name = 'applicationGatewaySslCertificate'; CertificatePolicy = $certPolicy } # ApplicationGateway
            ) | ForEach-Object {
              $null = Add-AzKeyVaultCertificate -VaultName $keyVaultName -Name $_.name -CertificatePolicy $_.CertificatePolicy
              Write-Verbose ('Added certificate [{0}] to key vault [{1}]' -f $_.name, $keyVaultName) -Verbose
            }

            # Set keys
            # ----
            @(
              @{ name = 'keyEncryptionKey'; Destination = 'Software' } # DiskEncryptionSet, VirtualMachines and VMSS
            ) | ForEach-Object {
                $null = Add-AzKeyVaultKey -VaultName $keyVaultName -Name $_.name -Destination $_.Destination
                Write-Verbose ('Added key [{0}] to key vault [{1}]' -f $_.name, $keyVaultName) -Verbose

            }

            # noprKeyVault Keys
             @(
              @{ name = 'keyEncryptionKey'; Destination = 'Software' } # Automation Account
            ) | ForEach-Object {
                $null = Add-AzKeyVaultKey -VaultName $noprKeyVaultName -Name $_.name -Destination $_.Destination
                Write-Verbose ('Added key [{0}] to key vault [{1}]' -f $_.name, $noprKeyVaultName) -Verbose

            }
          azPSVersion: 'latest'

  job_deploy_sqlmi_kv:
    runs-on: ubuntu-20.04
    name: 'Deploy sqlmi key vault'
    if: github.event.inputs.deploySqlMiDependencies == 'true'
    env:
      namespace: 'Microsoft.KeyVault\vaults'
    needs:
      - job_deploy_sa
      - job_deploy_evh
      - job_deploy_law
      - job_deploy_msi
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['sqlmi.parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'
          customParameterFileTokens: '{"msiPrincipalId":"${{ needs.job_deploy_msi.outputs.msiPrincipalId }}"}'

  job_deploy_sqlmi_kv_secrets:
    runs-on: ubuntu-20.04
    name: 'Set sqlmi key vault secrets and keys'
    if: github.event.inputs.deploySqlMiDependencies == 'true'
    needs:
      - job_deploy_sqlmi_kv
    env:
      namespace: 'Microsoft.KeyVault\vaults'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Setup agent'
        shell: pwsh
        run: |
          # Load used functions
          . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

          # Define PS modules to install on the runner
          $Modules = @(
              @{ Name = 'Az.KeyVault' }
          )

          # Set agent up
          Set-EnvironmentOnAgent -PSModules $Modules

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
      - name: 'Set sqlmi key vault secrets and keys'
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $parameterFilePath = Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'dependencies' '${{ env.namespace }}' 'parameters' 'sqlmi.parameters.json'
            # Load used functions
            . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'tokensReplacement' 'Convert-TokensInFile.ps1')

            # Replace tokens in parameter file
            $Settings = Get-Content -Path "settings.json" | ConvertFrom-Json -AsHashTable
            $ConvertTokensInputs = @{
                FilePath    = $parameterFilePath
                Tokens      = @{}
                TokenPrefix = $Settings.parameterFileTokens.tokenPrefix
                TokenSuffix = $Settings.parameterFileTokens.tokenSuffix
            }

            # Add local tokens
            if ($Settings.parameterFileTokens.localTokens) {
                $tokenMap = @{}
                foreach ($token in $Settings.parameterFileTokens.localTokens) {
                    $tokenMap += @{ $token.name = $token.value }
                }
                Write-Verbose ('Using local tokens [{0}]' -f ($tokenMap.Keys -join ', ')) -Verbose
                $ConvertTokensInputs.Tokens += $tokenMap
            }

            $null = Convert-TokensInFile @ConvertTokensInputs

            # Get key vault name
            $keyVaultParameters = (ConvertFrom-Json (Get-Content -Path $parameterFilePath -Raw)).parameters
            $keyVaultName = $keyVaultParameters.name.value

            # Generate values
            $usernameString = ( -join ((65..90) + (97..122) | Get-Random -Count 9 -SetSeed 1 | ForEach-Object { [char]$_ + "$_" })).substring(0, 19) # max length
            $userName = ConvertTo-SecureString -String $usernameString -AsPlainText -Force
            $passwordString = (New-Guid).Guid.SubString(0, 19)
            $password = ConvertTo-SecureString -String $passwordString -AsPlainText -Force

            # Set secrets
            # -------
            @(
              @{ name = 'administratorLogin'; secretValue = $username } # SQLManagedInstances
              @{ name = 'administratorLoginPassword'; secretValue = $password } # SQLManagedInstances
            ) | ForEach-Object {
              $null = Set-AzKeyVaultSecret -VaultName $keyVaultName -Name $_.name -SecretValue $_.secretValue
              Write-Verbose ('Added secret [{0}] to key vault [{1}]' -f $_.name, $keyVaultName) -Verbose
            }

            # Set keys
            # ----
            @(
              @{ name = 'keyEncryptionKeySqlMi'; Destination = 'Software' } # SQLManagedInstances
            ) | ForEach-Object {
                $null = Add-AzKeyVaultKey -VaultName $keyVaultName -Name $_.name -Destination $_.Destination
                Write-Verbose ('Added key [{0}] to key vault [{1}]' -f $_.name, $keyVaultName) -Verbose
            }
          azPSVersion: 'latest'

  job_deploy_avdag:
    runs-on: ubuntu-20.04
    name: 'Deploy AVD application group'
    env:
      namespace: 'Microsoft.DesktopVirtualization\applicationgroups'
    needs:
      - job_deploy_avdhp
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'

  job_deploy_rolea:
    runs-on: ubuntu-20.04
    name: 'Deploy role assignments'
    env:
      namespace: 'Microsoft.Authorization\roleAssignments'
    needs:
      - job_deploy_msi
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/subscription/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'
          customParameterFileTokens: '{"msiPrincipalId":"${{ needs.job_deploy_msi.outputs.msiPrincipalId }}"}'

  job_deploy_vnet:
    runs-on: ubuntu-20.04
    name: 'Deploy virtual networks'
    env:
      namespace: 'Microsoft.Network\virtualNetworks'
    needs:
      - job_deploy_nsg
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths:
          [
            '1.bastion.parameters.json',
            '2.vnetpeer01.parameters.json',
            '3.vnetpeer02.parameters.json',
            '4.azfw.parameters.json',
            '5.aks.parameters.json',
            '7.virtualHubConnection.parameters.json',
            'parameters.json',
          ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'

  job_deploy_sqlmi_vnet:
    runs-on: ubuntu-20.04
    name: 'Deploy sqlmi virtual network'
    if: github.event.inputs.deploySqlMiDependencies == 'true'
    env:
      namespace: 'Microsoft.Network\virtualNetworks'
    needs:
      - job_deploy_sqlmi_udr
      - job_deploy_sqlmi_nsg
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['6.sqlmi.parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'

  job_deploy_dnszone:
    runs-on: ubuntu-20.04
    name: 'Deploy private DNS zones'
    env:
      namespace: 'Microsoft.Network\privateDnsZones'
    needs:
      - job_deploy_vnet
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'

  job_deploy_vm:
    runs-on: ubuntu-20.04
    name: 'Deploy virtual machines'
    env:
      namespace: 'Microsoft.Compute\virtualMachines'
    needs:
      - job_deploy_kv_secrets
      - job_deploy_vnet
      - job_deploy_rsv
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'

  job_deploy_lb:
    runs-on: ubuntu-20.04
    name: 'Deploy load balancers'
    env:
      namespace: 'Microsoft.Network\loadBalancers'
    needs:
      - job_deploy_vnet
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['internal.parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/validateModuleDeployment
        with:
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: '${{ env.dependencyPath }}/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.location }}'
          resourceGroupName: '${{ env.defaultResourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
          removeDeployment: '${{ env.removeDeployment }}'
