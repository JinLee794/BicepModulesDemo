#########################################################
## 'Validate module with Pester' Composite Action      ##
#########################################################
##
## This composite action contains the logic to validate a module using a set of Pester tests
## The tests are implemented in file 'arm/.global/global.module.tests.ps1'
##
#########################################################
##
##-------------------------------------------##
## ACTION PARAMETERS                         ##
##-------------------------------------------##
##
##   |===========================================================================================================|
##   | Parameter  | Required | Default | Description                     | Example                               |
##   |------------|----------|---------|---------------------------------|---------------------------------------|
##   | modulePath | true     | ''      | The path to the module's folder | 'arm/Microsoft.ApiManagement/service' |
##   |===========================================================================================================|
##
##---------------------------------------------##

name: 'Execute Pester module tests'
description: 'Execute Pester module tests (if any)'

inputs:
  modulePath:
    description: "The path to the module's folder"
    required: true
    default: ''

runs:
  using: 'composite'
  steps:
    - name: 'Setup agent'
      shell: pwsh
      run: |
        # Grouping task logs
        Write-Output "::group::Setup agent"

        # Load used functions
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

        # Define PS modules to install on the runner
        $Modules = @(
            # This is the latest tested Pester version. Uncomment the next line in case of a future breaking change in the default version installed on the runner.
            # @{ Name = 'Pester'; Version = '5.3.1' }
            @{ Name = 'Az.Resources' }
        )

        # Set agent up
        Set-EnvironmentOnAgent -PSModules $Modules

        Write-Output "::endgroup::"

    - name: Azure Login
      uses: Azure/login@v1
      with:
        creds: ${{ env.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    # [Module Pester Test] task(s)
    #-----------------------------
    - name: 'Run global tests via Pester'
      id: pester_run_step
      shell: pwsh
      run: |
        # Grouping task logs
        Write-Output "::group::Run global tests via Pester"

        $moduleFolderPaths = @(Join-Path $env:GITHUB_WORKSPACE "${{ inputs.modulePath }}")
        $moduleFolderPaths += (Get-ChildItem $moduleFolderPaths -Recurse -Directory -Force).FullName | Where-Object {
          (Get-ChildItem $_ -File -Depth 0 -Include @('deploy.json', 'deploy.bicep') -Force).Count -gt 0
        }
        Write-Verbose "Execute tests in path(s):" -Verbose
        foreach($moduleFolderPath in $moduleFolderPaths) {
          Write-Verbose "- [($moduleFolderPath]" -Verbose
        }

        # --------------------- #
        # Invoke Pester test(s) #
        # --------------------- #
        Invoke-Pester -Configuration @{
          Run        = @{
            Container = New-PesterContainer -Path 'arm/.global/global.module.tests.ps1' -Data @{
              moduleFolderPaths = $moduleFolderPaths
            }
          }
          Filter     = @{
            ExcludeTag = 'ApiCheck'
          }
          TestResult = @{
            TestSuiteName = 'Global Module Tests'
            OutputPath    = 'arm/.global/global-testResults.xml'
            OutputFormat  = 'JUnitXml'
            Enabled       = $true
          }
          Output     = @{
            Verbosity = 'Detailed'
          }
        }

        Write-Output "::endgroup::"

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always() && !contains('cancelled,skipped', steps.pester_run_step.outcome)
      with:
        files: arm/.global/global-testResults.xml

    # [Module Pester Test] task(s)
    #-----------------------------
    - name: 'Run API tests via Pester'
      id: pester_api_run_step
      if: always()
      shell: pwsh
      run: |
        # Grouping task logs
        Write-Output "::group::Run API tests via Pester"

        $moduleFolderPaths = @(Join-Path $env:GITHUB_WORKSPACE "${{ inputs.modulePath }}")
        $moduleFolderPaths += (Get-ChildItem $moduleFolderPaths -Recurse -Directory -Force).FullName | Where-Object {
          (Get-ChildItem $_ -File -Depth 0 -Include @('deploy.json', 'deploy.bicep') -Force).Count -gt 0
        }
        Write-Verbose "Execute tests in path(s):" -Verbose
        foreach($moduleFolderPath in $moduleFolderPaths) {
          Write-Verbose "- [($moduleFolderPath]" -Verbose
        }

        # --------------------- #
        # Invoke Pester test(s) #
        # --------------------- #
        Invoke-Pester -Configuration @{
          Run        = @{
            Container = New-PesterContainer -Path 'arm/.global/global.module.tests.ps1' -Data @{
              moduleFolderPaths = $moduleFolderPaths
            }
          }
          Filter     = @{
            Tag = 'ApiCheck'
          }
          TestResult = @{
            TestSuiteName = 'Global Module API Tests'
            OutputPath    = 'arm/.global/api-testResults.xml'
            OutputFormat  = 'JUnitXml'
            Enabled       = $true
          }
          Output     = @{
            Verbosity = 'Detailed'
          }
        }

        Write-Output "::endgroup::"

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always() && !contains('cancelled,skipped', steps.pester_api_run_step.outcome)
      with:
        files: arm/.global/api-testResults.xml
